/*! @license ReactCodeMirror - MIT License - Tom Golden (8162045+tbjgolden@users.noreply.github.com) */

import React, { useRef, useEffect } from 'react';
import { EditorView, highlightSpecialChars, drawSelection, highlightActiveLine, keymap } from '@codemirror/view';
import { EditorState } from '@codemirror/state';
import { history, historyKeymap } from '@codemirror/history';
import { foldGutter, foldKeymap } from '@codemirror/fold';
import { indentOnInput } from '@codemirror/language';
import { lineNumbers, highlightActiveLineGutter } from '@codemirror/gutter';
import { defaultKeymap } from '@codemirror/commands';
import { bracketMatching } from '@codemirror/matchbrackets';
import { closeBrackets, closeBracketsKeymap } from '@codemirror/closebrackets';
import { highlightSelectionMatches, searchKeymap } from '@codemirror/search';
import { autocompletion, completionKeymap } from '@codemirror/autocomplete';
import { commentKeymap } from '@codemirror/comment';
import { rectangularSelection } from '@codemirror/rectangular-selection';
import { defaultHighlightStyle } from '@codemirror/highlight';
import { lintKeymap } from '@codemirror/lint';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}

var noop = function noop() {};

var CodeMirrorLite = function CodeMirrorLite(_a) {
  var valueProp = _a.value,
      onChangeProp = _a.onChange,
      _b = _a.extensions,
      extensions = _b === void 0 ? [] : _b,
      _c = _a.onViewChange,
      onViewChangeProp = _c === void 0 ? noop : _c,
      props = __rest(_a, ["value", "onChange", "extensions", "onViewChange"]);

  var valueRef = useRef(valueProp);
  valueRef.current = valueProp;
  var onChangeRef = useRef(onChangeProp);
  onChangeRef.current = onChangeProp;
  var onViewChangeRef = useRef(onViewChangeProp);
  onViewChangeRef.current = onViewChangeProp;
  var extensionsRef = useRef(extensions);
  var editorParentElRef = useRef(null);
  var editorRef = useRef(null);
  var changeHandlerRef = useRef(null);
  useEffect(function () {
    var _a;

    if (editorParentElRef.current !== null) {
      var view_1 = undefined;
      var state = EditorState.create({
        doc: valueRef.current,
        extensions: [EditorView.theme({
          '&': {
            alignSelf: 'stretch',
            flex: '1 0 auto'
          }
        }), extensionsRef.current, EditorState.transactionFilter.of(function (tr) {
          var _a;

          var editorView = view_1;

          if (editorView !== undefined) {
            var prevDoc = editorView.state.doc.toString();
            var nextDoc_1 = tr.newDoc.toString();

            if (prevDoc === nextDoc_1) {
              return tr;
            } else {
              changeHandlerRef.current = function (newValue) {
                changeHandlerRef.current = null;

                if (newValue === nextDoc_1) {
                  editorView.dispatch(editorView.state.update({
                    changes: tr.changes,
                    selection: tr.selection,
                    effects: tr.effects,
                    scrollIntoView: tr.scrollIntoView,
                    filter: false
                  }));
                  return true;
                } else {
                  return false;
                }
              };

              (_a = onChangeRef.current) === null || _a === void 0 ? void 0 : _a.call(onChangeRef, nextDoc_1);
              return [];
            }
          } else {
            return [];
          }
        })]
      });
      view_1 = new EditorView({
        state: state,
        parent: editorParentElRef.current
      });
      (_a = onViewChangeRef.current) === null || _a === void 0 ? void 0 : _a.call(onViewChangeRef, view_1);
      editorRef.current = {
        view: view_1
      };
    }

    return function () {
      var _a;

      if (editorRef.current !== null) {
        editorRef.current.view.destroy();
        editorRef.current = null;
        (_a = onViewChangeRef.current) === null || _a === void 0 ? void 0 : _a.call(onViewChangeRef, null);
      }
    };
  }, [editorParentElRef]);
  useEffect(function () {
    var changeHandler = changeHandlerRef.current;
    var handledChange = changeHandler === null || changeHandler === void 0 ? void 0 : changeHandler(valueProp);

    if (handledChange !== true && editorRef.current !== null) {
      editorRef.current.view.dispatch(editorRef.current.view.state.update({
        changes: {
          from: 0,
          to: editorRef.current.view.state.doc.toString().length,
          insert: valueProp
        },
        filter: false
      }));
    }
  }, [valueProp]);
  return /*#__PURE__*/React.createElement("div", __assign({}, props, {
    ref: editorParentElRef
  }));
};

var CodeMirror = function CodeMirror(_a) {
  var value = _a.value,
      onChange = _a.onChange,
      onViewChange = _a.onViewChange,
      _b = _a.extensions,
      extensions = _b === void 0 ? [] : _b,
      _c = _a.keymap,
      extraKeymap = _c === void 0 ? [] : _c,
      props = __rest(_a, ["value", "onChange", "onViewChange", "extensions", "keymap"]);

  return /*#__PURE__*/React.createElement(CodeMirrorLite, __assign({
    value: value,
    onChange: onChange,
    onViewChange: onViewChange,
    extensions: [lineNumbers(), highlightActiveLineGutter(), highlightSpecialChars(), history(), foldGutter(), drawSelection(), EditorState.allowMultipleSelections.of(true), indentOnInput(), defaultHighlightStyle.fallback, bracketMatching(), closeBrackets(), autocompletion(), rectangularSelection(), highlightActiveLine(), highlightSelectionMatches(), keymap.of(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray([], __read(closeBracketsKeymap)), __read(defaultKeymap)), __read(searchKeymap)), __read(historyKeymap)), __read(foldKeymap)), __read(commentKeymap)), __read(completionKeymap)), __read(lintKeymap)), __read(extraKeymap))), extensions]
  }, props));
};

export { CodeMirror };
//# sourceMappingURL=index.esm.js.map
